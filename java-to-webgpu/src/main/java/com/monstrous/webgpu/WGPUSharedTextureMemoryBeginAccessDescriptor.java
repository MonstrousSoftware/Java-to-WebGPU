package com.monstrous.webgpu;

import com.monstrous.utils.JavaWebGPU;
import com.monstrous.utils.CStrPointer;
import com.monstrous.utils.WgpuJavaStruct;
import com.monstrous.utils.RustCString;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUSharedTextureMemoryBeginAccessDescriptor extends WgpuJavaStruct {

    private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
    private final Struct.Unsigned32 concurrentRead = new Struct.Unsigned32();
    private final Struct.Unsigned32 initialized = new Struct.Unsigned32();
    private final Struct.size_t fenceCount = new Struct.size_t();
    private final Struct.Pointer fences = new Struct.Pointer();
    private final Struct.Pointer signaledValues = new Struct.Pointer();

    private WGPUSharedTextureMemoryBeginAccessDescriptor(){}

    @Deprecated
    public WGPUSharedTextureMemoryBeginAccessDescriptor(Runtime runtime){
        super(runtime);
    }

	/**
	* Creates this struct on the java heap.
	* In general, this should <b>not</b> be used because these structs
	* cannot be directly passed into native code. 
	*/
    public static WGPUSharedTextureMemoryBeginAccessDescriptor createHeap(){
        return new WGPUSharedTextureMemoryBeginAccessDescriptor();
    }

	/**
	* Creates this struct in direct memory.
	* This is how most structs should be created (unless, they
	* are members of a nothing struct)
	* 
	* @see WgpuJavaStruct#useDirectMemory
	*/
    public static WGPUSharedTextureMemoryBeginAccessDescriptor createDirect(){
        WGPUSharedTextureMemoryBeginAccessDescriptor struct = new WGPUSharedTextureMemoryBeginAccessDescriptor();
        struct.useDirectMemory();
        return struct;
    }


    public DynamicStructRef<WGPUChainedStruct> getNextInChain(){
        return nextInChain;
    }

    public void setNextInChain(WGPUChainedStruct... x){
        if(x.length == 0 || x[0] == null){
            this.nextInChain.set(JavaWebGPU.createNullPointer());
        } else {
            this.nextInChain.set(x);
        }
    }

    public long getConcurrentRead(){
        return concurrentRead.get();
    }

    public void setConcurrentRead(long x){
        this.concurrentRead.set(x);
    }

    public long getInitialized(){
        return initialized.get();
    }

    public void setInitialized(long x){
        this.initialized.set(x);
    }

    public long getFenceCount(){
        return fenceCount.get();
    }

    public void setFenceCount(long x){
        this.fenceCount.set(x);
    }

    public jnr.ffi.Pointer getFences(){
        return fences.get();
    }

    public void setFences(jnr.ffi.Pointer x){
        this.fences.set(x);
    }

    public jnr.ffi.Pointer getSignaledValues(){
        return signaledValues.get();
    }

    public void setSignaledValues(jnr.ffi.Pointer x){
        this.signaledValues.set(x);
    }

}