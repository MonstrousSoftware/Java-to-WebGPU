package com.monstrous.webgpu;

import com.monstrous.utils.WgpuJava;
import com.monstrous.utils.CStrPointer;
import com.monstrous.utils.WgpuJavaStruct;
import com.monstrous.utils.RustCString;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUSharedTextureMemoryZirconHandleDescriptor extends WgpuJavaStruct {

    private final WGPUChainedStruct chain = inner(WGPUChainedStruct.createHeap());
    private final Unsigned32 memoryFD = new Unsigned32();
    private final Unsigned64 allocationSize = new Unsigned64();

    private WGPUSharedTextureMemoryZirconHandleDescriptor(){}

    @Deprecated
    public WGPUSharedTextureMemoryZirconHandleDescriptor(Runtime runtime){
        super(runtime);
    }

	/**
	* Creates this struct on the java heap.
	* In general, this should <b>not</b> be used because these structs
	* cannot be directly passed into native code. 
	*/
    public static WGPUSharedTextureMemoryZirconHandleDescriptor createHeap(){
        return new WGPUSharedTextureMemoryZirconHandleDescriptor();
    }

	/**
	* Creates this struct in direct memory.
	* This is how most structs should be created (unless, they
	* are members of a nothing struct)
	* 
	* @see WgpuJavaStruct#useDirectMemory
	*/
    public static WGPUSharedTextureMemoryZirconHandleDescriptor createDirect(){
        var struct = new WGPUSharedTextureMemoryZirconHandleDescriptor();
        struct.useDirectMemory();
        return struct;
    }


    public WGPUChainedStruct getChain(){
        return chain;
    }

    public long getMemoryFD(){
        return memoryFD.get();
    }

    public void setMemoryFD(long x){
        this.memoryFD.set(x);
    }

    public @jnr.ffi.types.u_int64_t long getAllocationSize(){
        return allocationSize.get();
    }

    public void setAllocationSize(@jnr.ffi.types.u_int64_t long x){
        this.allocationSize.set(x);
    }

}