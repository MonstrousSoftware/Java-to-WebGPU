package com.monstrous.webgpu;

import com.monstrous.utils.JavaWebGPU;
import com.monstrous.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUCompilationInfo extends WgpuJavaStruct {

    private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
    private final size_t messageCount = new size_t();
    private final DynamicStructRef<WGPUCompilationMessage> messages = new DynamicStructRef<>(WGPUCompilationMessage.class);

    private WGPUCompilationInfo(){}

    @Deprecated
    public WGPUCompilationInfo(Runtime runtime){
        super(runtime);
    }

	/**
	* Creates this struct on the java heap.
	* In general, this should <b>not</b> be used because these structs
	* cannot be directly passed into native code. 
	*/
    public static WGPUCompilationInfo createHeap(){
        return new WGPUCompilationInfo();
    }

	/**
	* Creates this struct in direct memory.
	* This is how most structs should be created (unless, they
	* are members of a nothing struct)
	* 
	* @see WgpuJavaStruct#useDirectMemory
	*/
    public static WGPUCompilationInfo createDirect(){
        var struct = new WGPUCompilationInfo();
        struct.useDirectMemory();
        return struct;
    }


    public DynamicStructRef<WGPUChainedStruct> getNextInChain(){
        return nextInChain;
    }

    public void setNextInChain(WGPUChainedStruct... x){
        if(x.length == 0 || x[0] == null){
            this.nextInChain.set(JavaWebGPU.createNullPointer());
        } else {
            this.nextInChain.set(x);
        }
    }

    public long getMessageCount(){
        return messageCount.get();
    }

    public void setMessageCount(long x){
        this.messageCount.set(x);
    }

    public DynamicStructRef<WGPUCompilationMessage> getMessages(){
        return messages;
    }

    public void setMessages(WGPUCompilationMessage... x){
        if(x.length == 0 || x[0] == null){
            this.messages.set(JavaWebGPU.createNullPointer());
        } else {
            this.messages.set(x);
        }
    }

}